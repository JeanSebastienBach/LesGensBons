Object subclass: #Account	instanceVariableNames: 'balance'	classVariableNames: ''	poolDictionaries: ''	category: 'TD HLIN603'!!Account methodsFor: 'initialization' stamp: 'JeanSebastienBach 3/31/2020 16:22'!initialize	balance := 0.! !!Account methodsFor: 'actions api' stamp: 'JeanSebastienBach 3/31/2020 16:22'!get	^balance.! !!Account methodsFor: 'actions api' stamp: 'JeanSebastienBach 3/31/2020 16:50'!deposit: val	balance := balance + val.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Account class	instanceVariableNames: ''!!Account class methodsFor: 'example' stamp: 'JeanSebastienBach 3/31/2020 16:38'!example 	"self example"	| anAccount anotherAccount |	anAccount := self new: 100.	anotherAccount := self new: 200.	^anotherAccount get + anAccount get.! !!Account class methodsFor: 'instance creation' stamp: 'JeanSebastienBach 3/31/2020 16:24'!new: val	^((self new) initialize) deposit: val.! !Object subclass: #Counter	instanceVariableNames: 'value valeur'	classVariableNames: ''	poolDictionaries: ''	category: 'TD HLIN603'!!Counter methodsFor: 'manipulating' stamp: 'JeanSebastienBach 3/27/2020 10:58'!incr: x times: n	"incrémente le compteur receveur de x n fois"	"[ y | y + 1] est (lambda(y) (+ y 1) en scheme"	n timesRepeat: [ 		x timesRepeat: [ 			self incr 		] 	]! !!Counter methodsFor: 'manipulating' stamp: 'JeanSebastienBach 3/27/2020 10:27'!incr	"incrémente l'attribut value du receveur"	value := value + 1.! !!Counter methodsFor: 'manipulating' stamp: 'JeanSebastienBach 3/27/2020 10:24'!decr	"idécrémente l'attribut value"	value := value - 1.! !!Counter methodsFor: 'manipulating' stamp: 'JeanSebastienBach 3/27/2020 10:25'!raz	"remise à zéro du compteur"	self initialize 		"j'aurais pu écrire : value := 0"! !!Counter methodsFor: 'manipulating' stamp: 'JeanSebastienBach 3/27/2020 11:00'!printOn: aStream	"Equivalent d'un toString"	super printOn: aStream.	aStream nextPutAll: ' de valeur : '.	aStream nextPutAll: (value printString).! !!Counter methodsFor: 'manipulating' stamp: 'JeanSebastienBach 3/27/2020 10:30'!getValue 	"^ est return"	^value! !!Counter methodsFor: 'initialization' stamp: 'JeanSebastienBach 3/31/2020 16:00'!initialize: anInt	value := anInt.! !!Counter methodsFor: 'initialization' stamp: 'JeanSebastienBach 3/27/2020 10:15'!initialize 	value := 0.! !!Counter methodsFor: 'initialization' stamp: 'JeanSebastienBach 3/31/2020 15:09'!set: anInteger	valeur := anInteger.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Counter class	instanceVariableNames: ''!!Counter class methodsFor: 'instance creation' stamp: 'JeanSebastienBach 3/31/2020 15:51'!new	"Ceci est une méthode de classe"	"C'est une redéfinition de new (la méthode permettant de créer des instances)"	"que vaut self ? La classe qui est le receveur de l'envoi de message courant"	"super == self"	^ (super new) initialize! !!Counter class methodsFor: 'instance creation' stamp: 'JeanSebastienBach 3/31/2020 15:54'!new: anInt	"Ceci est une méthode de classe"	"C'est une redéfinition de new (la méthode permettant de créer des instances)"	"que vaut self ? La classe qui est le receveur de l'envoi de message courant"	"super == self"	^ (super new) initialize: anInt! !Account subclass: #InterestAccount	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TD HLIN603'!!InterestAccount methodsFor: 'actions api' stamp: 'JeanSebastienBach 3/31/2020 16:49'!deposit: uneSomme	super deposit: uneSomme.	self depositInterest: uneSomme.! !!InterestAccount methodsFor: 'actions api' stamp: 'JeanSebastienBach 3/31/2020 16:48'!depositInterest: n	"Une méthode en plus par rapport à la super-classe"	balance := balance + (5 * n / 100).! !