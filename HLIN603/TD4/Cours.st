Object subclass: #Counter	instanceVariableNames: 'value'	classVariableNames: ''	poolDictionaries: ''	category: 'TD HLIN603'!!Counter methodsFor: 'initialization' stamp: 'JeanSebastienBach 3/27/2020 10:15'!initialize 	value := 0.! !!Counter methodsFor: 'manipulating' stamp: 'JeanSebastienBach 3/27/2020 10:58'!incr: x times: n	"incrémente le compteur receveur de x n fois"	"[ y | y + 1] est (lambda(y) (+ y 1) en scheme"	n timesRepeat: [ 		x timesRepeat: [ 			self incr 		] 	]! !!Counter methodsFor: 'manipulating' stamp: 'JeanSebastienBach 3/27/2020 10:27'!incr	"incrémente l'attribut value du receveur"	value := value + 1.! !!Counter methodsFor: 'manipulating' stamp: 'JeanSebastienBach 3/27/2020 10:24'!decr	"idécrémente l'attribut value"	value := value - 1.! !!Counter methodsFor: 'manipulating' stamp: 'JeanSebastienBach 3/27/2020 10:25'!raz	"remise à zéro du compteur"	self initialize 		"j'aurais pu écrire : value := 0"! !!Counter methodsFor: 'manipulating' stamp: 'JeanSebastienBach 3/27/2020 11:00'!printOn: aStream	"Equivalent d'un toString"	super printOn: aStream.	aStream nextPutAll: ' de valeur : '.	aStream nextPutAll: (value printString).! !!Counter methodsFor: 'manipulating' stamp: 'JeanSebastienBach 3/27/2020 10:30'!getValue 	"^ est return"	^value! !